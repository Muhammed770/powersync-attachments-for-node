import Logger from 'js-logger';
import { SyncStatus } from '../../../db/crud/SyncStatus.js';
import { AbortOperation } from '../../../utils/AbortOperation.js';
import { BaseObserver } from '../../../utils/BaseObserver.js';
import { onAbortPromise, throttleLeadingTrailing } from '../../../utils/async.js';
import { SyncDataBucket } from '../bucket/SyncDataBucket.js';
import { FetchStrategy } from './AbstractRemote.js';
import { isStreamingKeepalive, isStreamingSyncCheckpoint, isStreamingSyncCheckpointComplete, isStreamingSyncCheckpointDiff, isStreamingSyncCheckpointPartiallyComplete, isStreamingSyncData } from './streaming-sync-types.js';
export var LockType;
(function (LockType) {
    LockType["CRUD"] = "crud";
    LockType["SYNC"] = "sync";
})(LockType || (LockType = {}));
export var SyncStreamConnectionMethod;
(function (SyncStreamConnectionMethod) {
    SyncStreamConnectionMethod["HTTP"] = "http";
    SyncStreamConnectionMethod["WEB_SOCKET"] = "web-socket";
})(SyncStreamConnectionMethod || (SyncStreamConnectionMethod = {}));
export const DEFAULT_CRUD_UPLOAD_THROTTLE_MS = 1000;
export const DEFAULT_RETRY_DELAY_MS = 5000;
export const DEFAULT_STREAMING_SYNC_OPTIONS = {
    retryDelayMs: DEFAULT_RETRY_DELAY_MS,
    logger: Logger.get('PowerSyncStream'),
    crudUploadThrottleMs: DEFAULT_CRUD_UPLOAD_THROTTLE_MS
};
export const DEFAULT_STREAM_CONNECTION_OPTIONS = {
    connectionMethod: SyncStreamConnectionMethod.WEB_SOCKET,
    fetchStrategy: FetchStrategy.Buffered,
    params: {}
};
// The priority we assume when we receive checkpoint lines where no priority is set.
// This is the default priority used by the sync service, but can be set to an arbitrary
// value since sync services without priorities also won't send partial sync completion
// messages.
const FALLBACK_PRIORITY = 3;
export class AbstractStreamingSyncImplementation extends BaseObserver {
    _lastSyncedAt;
    options;
    abortController;
    crudUpdateListener;
    streamingSyncPromise;
    pendingCrudUpload;
    syncStatus;
    triggerCrudUpload;
    constructor(options) {
        super();
        this.options = { ...DEFAULT_STREAMING_SYNC_OPTIONS, ...options };
        this.syncStatus = new SyncStatus({
            connected: false,
            connecting: false,
            lastSyncedAt: undefined,
            dataFlow: {
                uploading: false,
                downloading: false
            }
        });
        this.abortController = null;
        this.triggerCrudUpload = throttleLeadingTrailing(() => {
            if (!this.syncStatus.connected || this.pendingCrudUpload != null) {
                return;
            }
            this.pendingCrudUpload = new Promise((resolve) => {
                this._uploadAllCrud().finally(() => {
                    this.pendingCrudUpload = undefined;
                    resolve();
                });
            });
        }, this.options.crudUploadThrottleMs);
    }
    async waitForReady() { }
    waitForStatus(status) {
        return this.waitUntilStatusMatches((currentStatus) => {
            /**
             * Match only the partial status options provided in the
             * matching status
             */
            const matchPartialObject = (compA, compB) => {
                return Object.entries(compA).every(([key, value]) => {
                    const comparisonBValue = compB[key];
                    if (typeof value == 'object' && typeof comparisonBValue == 'object') {
                        return matchPartialObject(value, comparisonBValue);
                    }
                    return value == comparisonBValue;
                });
            };
            return matchPartialObject(status, currentStatus);
        });
    }
    waitUntilStatusMatches(predicate) {
        return new Promise((resolve) => {
            if (predicate(this.syncStatus)) {
                resolve();
                return;
            }
            const l = this.registerListener({
                statusChanged: (updatedStatus) => {
                    if (predicate(updatedStatus)) {
                        resolve();
                        l?.();
                    }
                }
            });
        });
    }
    get lastSyncedAt() {
        const lastSynced = this.syncStatus.lastSyncedAt;
        return lastSynced && new Date(lastSynced);
    }
    get isConnected() {
        return this.syncStatus.connected;
    }
    get logger() {
        return this.options.logger;
    }
    async dispose() {
        this.crudUpdateListener?.();
        this.crudUpdateListener = undefined;
    }
    async hasCompletedSync() {
        return this.options.adapter.hasCompletedSync();
    }
    async getWriteCheckpoint() {
        const clientId = await this.options.adapter.getClientId();
        let path = `/write-checkpoint2.json?client_id=${clientId}`;
        const response = await this.options.remote.get(path);
        return response['data']['write_checkpoint'];
    }
    async _uploadAllCrud() {
        return this.obtainLock({
            type: LockType.CRUD,
            callback: async () => {
                /**
                 * Keep track of the first item in the CRUD queue for the last `uploadCrud` iteration.
                 */
                let checkedCrudItem;
                while (true) {
                    this.updateSyncStatus({
                        dataFlow: {
                            uploading: true
                        }
                    });
                    try {
                        /**
                         * This is the first item in the FIFO CRUD queue.
                         */
                        const nextCrudItem = await this.options.adapter.nextCrudItem();
                        if (nextCrudItem) {
                            if (nextCrudItem.clientId == checkedCrudItem?.clientId) {
                                // This will force a higher log level than exceptions which are caught here.
                                this.logger.warn(`Potentially previously uploaded CRUD entries are still present in the upload queue.
Make sure to handle uploads and complete CRUD transactions or batches by calling and awaiting their [.complete()] method.
The next upload iteration will be delayed.`);
                                throw new Error('Delaying due to previously encountered CRUD item.');
                            }
                            checkedCrudItem = nextCrudItem;
                            await this.options.uploadCrud();
                            this.updateSyncStatus({
                                dataFlow: {
                                    uploadError: undefined
                                }
                            });
                        }
                        else {
                            // Uploading is completed
                            await this.options.adapter.updateLocalTarget(() => this.getWriteCheckpoint());
                            break;
                        }
                    }
                    catch (ex) {
                        checkedCrudItem = undefined;
                        this.updateSyncStatus({
                            dataFlow: {
                                uploading: false,
                                uploadError: ex
                            }
                        });
                        await this.delayRetry();
                        if (!this.isConnected) {
                            // Exit the upload loop if the sync stream is no longer connected
                            break;
                        }
                        this.logger.debug(`Caught exception when uploading. Upload will retry after a delay. Exception: ${ex.message}`);
                    }
                    finally {
                        this.updateSyncStatus({
                            dataFlow: {
                                uploading: false
                            }
                        });
                    }
                }
            }
        });
    }
    async connect(options) {
        if (this.abortController) {
            await this.disconnect();
        }
        this.abortController = new AbortController();
        this.streamingSyncPromise = this.streamingSync(this.abortController.signal, options);
        // Return a promise that resolves when the connection status is updated
        return new Promise((resolve) => {
            const l = this.registerListener({
                statusUpdated: (update) => {
                    // This is triggered as soon as a connection is read from
                    if (typeof update.connected == 'undefined') {
                        // only concern with connection updates
                        return;
                    }
                    if (update.connected == false) {
                        /**
                         * This function does not reject if initial connect attempt failed
                         */
                        this.logger.warn('Initial connect attempt did not successfully connect to server');
                    }
                    resolve();
                    l();
                }
            });
        });
    }
    async disconnect() {
        if (!this.abortController) {
            return;
        }
        // This might be called multiple times
        if (!this.abortController.signal.aborted) {
            this.abortController.abort(new AbortOperation('Disconnect has been requested'));
        }
        // Await any pending operations before completing the disconnect operation
        try {
            await this.streamingSyncPromise;
        }
        catch (ex) {
            // The operation might have failed, all we care about is if it has completed
            this.logger.warn(ex);
        }
        this.streamingSyncPromise = undefined;
        this.abortController = null;
        this.updateSyncStatus({ connected: false, connecting: false });
    }
    /**
     * @deprecated use [connect instead]
     */
    async streamingSync(signal, options) {
        if (!signal) {
            this.abortController = new AbortController();
            signal = this.abortController.signal;
        }
        /**
         * Listen for CRUD updates and trigger upstream uploads
         */
        this.crudUpdateListener = this.options.adapter.registerListener({
            crudUpdate: () => this.triggerCrudUpload()
        });
        /**
         * Create a new abort controller which aborts items downstream.
         * This is needed to close any previous connections on exception.
         */
        let nestedAbortController = new AbortController();
        signal.addEventListener('abort', () => {
            /**
             * A request for disconnect was received upstream. Relay the request
             * to the nested abort controller.
             */
            nestedAbortController.abort(signal?.reason ?? new AbortOperation('Received command to disconnect from upstream'));
            this.crudUpdateListener?.();
            this.crudUpdateListener = undefined;
            this.updateSyncStatus({
                connected: false,
                connecting: false,
                dataFlow: {
                    downloading: false
                }
            });
        });
        /**
         * This loops runs until [retry] is false or the abort signal is set to aborted.
         * Aborting the nestedAbortController will:
         *  - Abort any pending fetch requests
         *  - Close any sync stream ReadableStreams (which will also close any established network requests)
         */
        while (true) {
            this.updateSyncStatus({ connecting: true });
            try {
                if (signal?.aborted) {
                    break;
                }
                await this.streamingSyncIteration(nestedAbortController.signal, options);
                // Continue immediately, streamingSyncIteration will wait before completing if necessary.
            }
            catch (ex) {
                /**
                 * Either:
                 *  - A network request failed with a failed connection or not OKAY response code.
                 *  - There was a sync processing error.
                 * This loop will retry.
                 * The nested abort controller will cleanup any open network requests and streams.
                 * The WebRemote should only abort pending fetch requests or close active Readable streams.
                 */
                if (ex instanceof AbortOperation) {
                    this.logger.warn(ex);
                }
                else {
                    this.logger.error(ex);
                }
                this.updateSyncStatus({
                    dataFlow: {
                        downloadError: ex
                    }
                });
                // On error, wait a little before retrying
                await this.delayRetry();
            }
            finally {
                if (!signal.aborted) {
                    nestedAbortController.abort(new AbortOperation('Closing sync stream network requests before retry.'));
                    nestedAbortController = new AbortController();
                }
                this.updateSyncStatus({
                    connected: false,
                    connecting: true // May be unnecessary
                });
            }
        }
        // Mark as disconnected if here
        this.updateSyncStatus({ connected: false, connecting: false });
    }
    async collectLocalBucketState() {
        const bucketEntries = await this.options.adapter.getBucketStates();
        const req = bucketEntries.map((entry) => ({
            name: entry.bucket,
            after: entry.op_id
        }));
        const localDescriptions = new Map();
        for (const entry of bucketEntries) {
            localDescriptions.set(entry.bucket, null);
        }
        return [req, localDescriptions];
    }
    async streamingSyncIteration(signal, options) {
        await this.obtainLock({
            type: LockType.SYNC,
            signal,
            callback: async () => {
                const resolvedOptions = {
                    ...DEFAULT_STREAM_CONNECTION_OPTIONS,
                    ...(options ?? {})
                };
                this.logger.debug('Streaming sync iteration started');
                this.options.adapter.startSession();
                let [req, bucketMap] = await this.collectLocalBucketState();
                // These are compared by reference
                let targetCheckpoint = null;
                let validatedCheckpoint = null;
                let appliedCheckpoint = null;
                const clientId = await this.options.adapter.getClientId();
                this.logger.debug('Requesting stream from server');
                const syncOptions = {
                    path: '/sync/stream',
                    abortSignal: signal,
                    data: {
                        buckets: req,
                        include_checksum: true,
                        raw_data: true,
                        parameters: resolvedOptions.params,
                        client_id: clientId
                    }
                };
                let stream;
                if (resolvedOptions?.connectionMethod == SyncStreamConnectionMethod.HTTP) {
                    stream = await this.options.remote.postStream(syncOptions);
                }
                else {
                    stream = await this.options.remote.socketStream({
                        ...syncOptions,
                        ...{ fetchStrategy: resolvedOptions.fetchStrategy }
                    });
                }
                this.logger.debug('Stream established. Processing events');
                while (!stream.closed) {
                    const line = await stream.read();
                    if (!line) {
                        // The stream has closed while waiting
                        return;
                    }
                    // A connection is active and messages are being received
                    if (!this.syncStatus.connected) {
                        // There is a connection now
                        Promise.resolve().then(() => this.triggerCrudUpload());
                        this.updateSyncStatus({
                            connected: true
                        });
                    }
                    if (isStreamingSyncCheckpoint(line)) {
                        targetCheckpoint = line.checkpoint;
                        const bucketsToDelete = new Set(bucketMap.keys());
                        const newBuckets = new Map();
                        for (const checksum of line.checkpoint.buckets) {
                            newBuckets.set(checksum.bucket, {
                                name: checksum.bucket,
                                priority: checksum.priority ?? FALLBACK_PRIORITY
                            });
                            bucketsToDelete.delete(checksum.bucket);
                        }
                        if (bucketsToDelete.size > 0) {
                            this.logger.debug('Removing buckets', [...bucketsToDelete]);
                        }
                        bucketMap = newBuckets;
                        await this.options.adapter.removeBuckets([...bucketsToDelete]);
                        await this.options.adapter.setTargetCheckpoint(targetCheckpoint);
                    }
                    else if (isStreamingSyncCheckpointComplete(line)) {
                        const result = await this.applyCheckpoint(targetCheckpoint, signal);
                        if (result.endIteration) {
                            return;
                        }
                        else if (result.applied) {
                            appliedCheckpoint = targetCheckpoint;
                        }
                        validatedCheckpoint = targetCheckpoint;
                    }
                    else if (isStreamingSyncCheckpointPartiallyComplete(line)) {
                        const priority = line.partial_checkpoint_complete.priority;
                        this.logger.debug('Partial checkpoint complete', priority);
                        const result = await this.options.adapter.syncLocalDatabase(targetCheckpoint, priority);
                        if (!result.checkpointValid) {
                            // This means checksums failed. Start again with a new checkpoint.
                            // TODO: better back-off
                            await new Promise((resolve) => setTimeout(resolve, 50));
                            return;
                        }
                        else if (!result.ready) {
                            // If we have pending uploads, we can't complete new checkpoints outside of priority 0.
                            // We'll resolve this for a complete checkpoint.
                        }
                        else {
                            // We'll keep on downloading, but can report that this priority is synced now.
                            this.logger.debug('partial checkpoint validation succeeded');
                            // All states with a higher priority can be deleted since this partial sync includes them.
                            const priorityStates = this.syncStatus.priorityStatusEntries.filter((s) => s.priority <= priority);
                            priorityStates.push({
                                priority,
                                lastSyncedAt: new Date(),
                                hasSynced: true
                            });
                            this.updateSyncStatus({
                                connected: true,
                                priorityStatusEntries: priorityStates
                            });
                        }
                    }
                    else if (isStreamingSyncCheckpointDiff(line)) {
                        // TODO: It may be faster to just keep track of the diff, instead of the entire checkpoint
                        if (targetCheckpoint == null) {
                            throw new Error('Checkpoint diff without previous checkpoint');
                        }
                        const diff = line.checkpoint_diff;
                        const newBuckets = new Map();
                        for (const checksum of targetCheckpoint.buckets) {
                            newBuckets.set(checksum.bucket, checksum);
                        }
                        for (const checksum of diff.updated_buckets) {
                            newBuckets.set(checksum.bucket, checksum);
                        }
                        for (const bucket of diff.removed_buckets) {
                            newBuckets.delete(bucket);
                        }
                        const newCheckpoint = {
                            last_op_id: diff.last_op_id,
                            buckets: [...newBuckets.values()],
                            write_checkpoint: diff.write_checkpoint
                        };
                        targetCheckpoint = newCheckpoint;
                        bucketMap = new Map();
                        newBuckets.forEach((checksum, name) => bucketMap.set(name, {
                            name: checksum.bucket,
                            priority: checksum.priority ?? FALLBACK_PRIORITY
                        }));
                        const bucketsToDelete = diff.removed_buckets;
                        if (bucketsToDelete.length > 0) {
                            this.logger.debug('Remove buckets', bucketsToDelete);
                        }
                        await this.options.adapter.removeBuckets(bucketsToDelete);
                        await this.options.adapter.setTargetCheckpoint(targetCheckpoint);
                    }
                    else if (isStreamingSyncData(line)) {
                        const { data } = line;
                        this.updateSyncStatus({
                            dataFlow: {
                                downloading: true
                            }
                        });
                        await this.options.adapter.saveSyncData({ buckets: [SyncDataBucket.fromRow(data)] });
                    }
                    else if (isStreamingKeepalive(line)) {
                        const remaining_seconds = line.token_expires_in;
                        if (remaining_seconds == 0) {
                            // Connection would be closed automatically right after this
                            this.logger.debug('Token expiring; reconnect');
                            /**
                             * For a rare case where the backend connector does not update the token
                             * (uses the same one), this should have some delay.
                             */
                            await this.delayRetry();
                            return;
                        }
                        this.triggerCrudUpload();
                    }
                    else {
                        this.logger.debug('Sync complete');
                        if (targetCheckpoint === appliedCheckpoint) {
                            this.updateSyncStatus({
                                connected: true,
                                lastSyncedAt: new Date(),
                                priorityStatusEntries: [],
                                dataFlow: {
                                    downloadError: undefined
                                }
                            });
                        }
                        else if (validatedCheckpoint === targetCheckpoint) {
                            const result = await this.applyCheckpoint(targetCheckpoint, signal);
                            if (result.endIteration) {
                                return;
                            }
                            else if (result.applied) {
                                appliedCheckpoint = targetCheckpoint;
                            }
                        }
                    }
                }
                this.logger.debug('Stream input empty');
                // Connection closed. Likely due to auth issue.
                return;
            }
        });
    }
    async applyCheckpoint(checkpoint, abort) {
        let result = await this.options.adapter.syncLocalDatabase(checkpoint);
        const pending = this.pendingCrudUpload;
        if (!result.checkpointValid) {
            this.logger.debug('Checksum mismatch in checkpoint, will reconnect');
            // This means checksums failed. Start again with a new checkpoint.
            // TODO: better back-off
            await new Promise((resolve) => setTimeout(resolve, 50));
            return { applied: false, endIteration: true };
        }
        else if (!result.ready && pending != null) {
            // We have pending entries in the local upload queue or are waiting to confirm a write
            // checkpoint, which prevented this checkpoint from applying. Wait for that to complete and
            // try again.
            this.logger.debug('Could not apply checkpoint due to local data. Waiting for in-progress upload before retrying.');
            await Promise.race([pending, onAbortPromise(abort)]);
            if (abort.aborted) {
                return { applied: false, endIteration: true };
            }
            // Try again now that uploads have completed.
            result = await this.options.adapter.syncLocalDatabase(checkpoint);
        }
        if (result.checkpointValid && result.ready) {
            this.logger.debug('validated checkpoint', checkpoint);
            this.updateSyncStatus({
                connected: true,
                lastSyncedAt: new Date(),
                dataFlow: {
                    downloading: false,
                    downloadError: undefined
                }
            });
            return { applied: true, endIteration: false };
        }
        else {
            this.logger.debug('Could not apply checkpoint. Waiting for next sync complete line.');
            return { applied: false, endIteration: false };
        }
    }
    updateSyncStatus(options) {
        const updatedStatus = new SyncStatus({
            connected: options.connected ?? this.syncStatus.connected,
            connecting: !options.connected && (options.connecting ?? this.syncStatus.connecting),
            lastSyncedAt: options.lastSyncedAt ?? this.syncStatus.lastSyncedAt,
            dataFlow: {
                ...this.syncStatus.dataFlowStatus,
                ...options.dataFlow
            },
            priorityStatusEntries: options.priorityStatusEntries ?? this.syncStatus.priorityStatusEntries
        });
        if (!this.syncStatus.isEqual(updatedStatus)) {
            this.syncStatus = updatedStatus;
            // Only trigger this is there was a change
            this.iterateListeners((cb) => cb.statusChanged?.(updatedStatus));
        }
        // trigger this for all updates
        this.iterateListeners((cb) => cb.statusUpdated?.(options));
    }
    async delayRetry() {
        return new Promise((resolve) => setTimeout(resolve, this.options.retryDelayMs));
    }
}
